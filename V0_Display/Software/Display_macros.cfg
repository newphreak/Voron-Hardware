[gcode_macro _DISPLAY_SETTINGS]
##### Display info #####
variable_display: {
    "bootsplash": "__voron_bootsplash",      # [none|__voron_bootsplash] select which bootsplash to use
    "group": "__voron_display",              # [none|__voron_display] which display layout to use, none will be default layout
    "icon": "voron_heart",                   # [voron_logo|voron_heart] select which icon to show (Shows after printer_name)
    "printer_name": "V0.X XXXX",              # printer name shown on the display, replace with your serial.
    "printing_message": "Printer goes brrr"  # Set a suitable message if you want to spice it up
    }
gcode: # Intentionally blank, we're only using this macro to store variables.

# Edit colors to match what you have in printer.cfg
[gcode_macro _WAKE_UP]
gcode:
    {% if "neopixel displaystatus" in printer.configfile.settings %}
        SET_LED LED="displayStatus" RED=0.2 GREEN=0.05 BLUE=0 SYNC=0 TRANSMIT=1
    {% endif %}
# If you have case_lights you can uncomment and edit colors. Add WHITE=X if it's rgbw.
#    {% if "neopixel displaystatus" in printer.configfile.settings %}
#        SET_LED LED="case_lights" RED=0.2 GREEN=0.05 BLUE=0 SYNC=0 TRANSMIT=1
#    {% endif %}
    SET_DISPLAY_GROUP GROUP=__voron_display

#############################################################
##                ## Custom display menu ##                ##
##                 ## Do not edit below ##                 ##
#############################################################

[delayed_gcode INITIALIZE_DISPLAY]
initial_duration: 0.4
gcode:
  {% set display_group = printer["gcode_macro _DISPLAY_SETTINGS"].display.group|lower %}
  {% set display_bootsplash = printer["gcode_macro _DISPLAY_SETTINGS"].display.bootsplash|lower %}

  {% if display_group != "none" and display_bootsplash == "none" %}
    SET_DISPLAY_GROUP GROUP={display_group}
  {% elif display_group != "none" and display_bootsplash != "none" %}
    SET_DISPLAY_GROUP GROUP={display_bootsplash}
    G4 P8000
    SET_DISPLAY_GROUP GROUP={display_group}
  {% elif display_group == "none" and display_bootsplash != "none" %}
    SET_DISPLAY_GROUP GROUP={display_bootsplash}
    G4 P8000
    SET_DISPLAY_GROUP GROUP=_default_16x4
  {% endif %}

#############################################################
##                        ## Main ##                       ##
#############################################################
[display]
menu_root: __voron
[menu __voron]
type: list
name: Main
[menu __voron __wakeup]
type: command
name: Wake up
enable: {(printer.idle_timeout.state|lower == "idle")}
gcode:
    _WAKE_UP
    {menu.exit(update)}
#############################################################
##                       ## Tune ##                        ##
#############################################################
[menu __voron __tune]
type: list
name: Tune
enable: {(printer.print_stats.state == "paused") or (printer.idle_timeout.state == "Printing")}
[menu __voron __tune __speed]
type: input
name: Speed: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.speed_factor}
input_min: 0.01
input_max: 2
input_step: 0.01
realtime: True
gcode:
    M220 S{'%d' % (menu.input*100)}
[menu __voron __tune __flow]
type: input
name: Flow: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.extrude_factor}
input_min: 0.01
input_max: 2
input_step: 0.01
realtime: True
gcode:
    M221 S{'%d' % (menu.input*100)}
[menu __voron __tune __offsetz]
type: input
name: Z Offset:{'%05.3f' % menu.input}
input: {printer.gcode_move.homing_origin.z}
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode:
    SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1
[menu __voron __tune __cancel]
type: command
name: Cancel Print
enable: {printer.idle_timeout.state == "Printing"}
gcode:
    CANCEL_PRINT
    {menu.exit(update)}
[menu __voron __tune __pause]
type: command
name: Pause  Print
enable: {printer.print_stats.state == "printing"}
gcode:
    PAUSE
    {menu.exit(update)}
[menu __voron __tune __resume]
type: command
name: Resume Print
enable: {printer.print_stats.state == "paused"}
gcode:
    RESUME
    {menu.exit(update)}
#####################################################################
#       Temperature
#####################################################################
[menu __voron __temp]
type: list
name: Temperature
[menu __voron __temp __hotend0_target]
type: input
enable: {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name: {"Ext:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 5
gcode: M104 T0 S{'%.0f' % menu.input}
[menu __voron __temp __hotbed_target]
type: input
enable: {('heater_bed' in printer)}
name: {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input: {printer.heater_bed.target}
input_min: 0
input_max: {printer.configfile.config.heater_bed.max_temp}
input_step: 5
gcode: M140 S{'%.0f' % menu.input}
[menu __voron __temp __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Turn off all
gcode:
    M104 S0
    M140 S0
    {menu.exit(update)}
#####################################################################
#       Control
#####################################################################
[menu __voron __control]
type: list
name: Control
[menu __voron __control __disable]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Steppers off
gcode:
    M84
    {menu.exit(update)}
[menu __voron __control __home]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Home: {['All','Z','X/Y'][menu.input|int]}
input: 0
input_min: 0
input_max: 2
gcode:
    {%- if menu.event != 'long_click' -%}
        {menu.exit(True)}
        {% if menu.input|int == 0 %}
            G28
        {% elif menu.input|int == 1 %}
            G28 Z
        {% elif menu.input|int == 2 %}
            G28 X Y
        {% endif %}
    {%- elif menu.event == 'long_click' -%}
        {menu.back(true)}
    {%- endif -%}
[menu __voron __control __fanspeed]
type: input
enable: {'fan' in printer}
name: Fan speed: {'%3d' % (menu.input*100)}%
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 0.1
gcode:
    M106 S{'%d' % (menu.input*255)}
#############################################################
##                      ## SD-Card ##                      ##
#############################################################
[menu __voron __sdcard]
type: list
name: SD-Card
enable: {(not printer.idle_timeout.state == "Printing") or (not printer.print_stats.state == "paused")}
[menu __voron __sdcard __reprint]
type: command
name: Reprint Last
enable: {(not printer.idle_timeout.state == "Printing") or (not printer.print_stats.state == "paused")}
gcode:
    {% set state = printer.print_stats.state %}
    {% set file = printer.print_stats.filename %}
    {% if state == 'printing' %}
        { action_respond_info("Print is still running") }
    {% elif not file.endswith("gcode") %}
        { action_respond_info("No file to reprint") }
    {% else %}
        SDCARD_PRINT_FILE FILENAME="{file}"
        { action_respond_info("Print job restarted.") }
    {% endif %}
#####################################################################
#       Filament
#####################################################################
[menu __voron __filament]
type: list
name: Filament
enable: {((('gcode_macro UNLOAD_FILAMENT' in printer) and (printer.print_stats.state == "paused")) or ('gcode_macro UNLOAD_FILAMENT' in printer) and (not printer.idle_timeout.state == "Printing"))}
[menu __voron __filament __load]
type: command
name: Load Filament
enable: {'gcode_macro LOAD_FILAMENT' in printer}
gcode:
    LOAD_FILAMENT
    {menu.exit(update)}
[menu __voron __filament __unload]
type: command
name: Unload Filament
enable: {'gcode_macro UNLOAD_FILAMENT' in printer}
gcode:
    UNLOAD_FILAMENT
    {menu.exit(update)}
#############################################################
##                 ## Calibration ##                 ##
#############################################################
[menu __voron __calibration]
type: list
enable: {(not printer.idle_timeout.state == "Printing") or (not printer.print_stats.state == "paused")}
name: Calibration
[menu __voron __calibration __bed_screws_adjust]
type: command
name: BedScrewAdjust
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28
    {% endif %}
    BED_SCREWS_ADJUST
[menu __voron __calibration __adjusted_accept]
type: input
enable: {('bed_screws' in printer.configfile.settings)}
name: Send: {['Adjusted','Accept'][menu.input|int]}
input: 0
input_min: 0
input_max: 1
gcode:
    {%- if menu.event != 'long_click' -%}
        {% if menu.input|int == 0 %}
            ADJUSTED
        {% elif menu.input|int == 1 %}
            ACCEPT
        {% endif %}
    {%- elif menu.event == 'long_click' -%}
        {menu.exit(true)}
    {%- endif -%}